// <auto-generated />
using System;
using MedicalReservationsApp.Server.DdContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalReservationsApp.Server.Migrations
{
    [DbContext(typeof(ReservationContext))]
    [Migration("20240513191459_MedicalReservationdb")]
    partial class MedicalReservationdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.ContactType", b =>
                {
                    b.Property<int>("IdContactType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContactType"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.HasKey("IdContactType");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.Contacts", b =>
                {
                    b.Property<int>("IdContacts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdContacts"));

                    b.Property<int>("IdContactType")
                        .HasColumnType("int");

                    b.HasKey("IdContacts");

                    b.HasIndex("IdContactType");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.Institution", b =>
                {
                    b.Property<int>("IdInstitution")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInstitution"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.HasKey("IdInstitution");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.ProfessionalUsers", b =>
                {
                    b.Property<int>("IdProfessionalUsers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfessionalUsers"));

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("IdInstitution")
                        .HasColumnType("int");

                    b.Property<int>("IdUserContacts")
                        .HasColumnType("int");

                    b.Property<int>("IdUsersProfessions")
                        .HasColumnType("int");

                    b.Property<int>("IdUsersTypes")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("IdProfessionalUsers");

                    b.HasIndex("IdInstitution");

                    b.HasIndex("IdUserContacts");

                    b.HasIndex("IdUsersProfessions");

                    b.HasIndex("IdUsersTypes");

                    b.ToTable("ProfessionalUsers");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.Specialties", b =>
                {
                    b.Property<int>("IdSpecialties")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSpecialties"));

                    b.Property<string>("specialities")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("IdSpecialties");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.UserContacts", b =>
                {
                    b.Property<int>("IdUserContacts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserContacts"));

                    b.Property<int>("IdContacts")
                        .HasColumnType("int");

                    b.HasKey("IdUserContacts");

                    b.HasIndex("IdContacts");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.UsersClients", b =>
                {
                    b.Property<int>("IdUsersClients")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsersClients"));

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("IdContactType")
                        .HasColumnType("int");

                    b.Property<int>("IdUserTypes")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("IdUsersClients");

                    b.HasIndex("IdContactType");

                    b.HasIndex("IdUserTypes");

                    b.ToTable("UsersClients");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.UsersProfessions", b =>
                {
                    b.Property<int>("IdUsersProfessions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsersProfessions"));

                    b.Property<int>("IdSpecialties")
                        .HasColumnType("int");

                    b.Property<string>("Professions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdUsersProfessions");

                    b.HasIndex("IdSpecialties");

                    b.ToTable("UsersProfessions");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.UsersTypes", b =>
                {
                    b.Property<int>("IdUsersTypes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsersTypes"));

                    b.Property<bool>("Customer")
                        .HasColumnType("bit");

                    b.Property<bool>("Profesional")
                        .HasColumnType("bit");

                    b.HasKey("IdUsersTypes");

                    b.ToTable("UsersTypes");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.Contacts", b =>
                {
                    b.HasOne("MedicalReservationsApp.Server.Models.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("IdContactType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.ProfessionalUsers", b =>
                {
                    b.HasOne("MedicalReservationsApp.Server.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("IdInstitution")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalReservationsApp.Server.Models.UserContacts", "UserContacts")
                        .WithMany()
                        .HasForeignKey("IdUserContacts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalReservationsApp.Server.Models.UsersProfessions", "UsersProfessions")
                        .WithMany()
                        .HasForeignKey("IdUsersProfessions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalReservationsApp.Server.Models.UsersTypes", "UsersTypes")
                        .WithMany()
                        .HasForeignKey("IdUsersTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("UserContacts");

                    b.Navigation("UsersProfessions");

                    b.Navigation("UsersTypes");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.UserContacts", b =>
                {
                    b.HasOne("MedicalReservationsApp.Server.Models.Contacts", "Contacts")
                        .WithMany()
                        .HasForeignKey("IdContacts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.UsersClients", b =>
                {
                    b.HasOne("MedicalReservationsApp.Server.Models.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("IdContactType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalReservationsApp.Server.Models.UsersTypes", "UsersTypes")
                        .WithMany()
                        .HasForeignKey("IdUserTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("UsersTypes");
                });

            modelBuilder.Entity("MedicalReservationsApp.Server.Models.UsersProfessions", b =>
                {
                    b.HasOne("MedicalReservationsApp.Server.Models.Specialties", "Specialties")
                        .WithMany()
                        .HasForeignKey("IdSpecialties")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialties");
                });
#pragma warning restore 612, 618
        }
    }
}
